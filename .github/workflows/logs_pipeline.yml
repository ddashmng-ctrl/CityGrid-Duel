name: Logs Pipeline with Charts

on:
  pull_request:
    paths:
      - 'logs/*.json'
      - 'scripts/**'
      - '.github/workflows/logs_pipeline.yml'
  push:
    paths:
      - 'logs/*.json'
      - 'scripts/**'
      - '.github/workflows/logs_pipeline.yml'
  workflow_dispatch:

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt.
      
      - name: Create output directories
        run: |
          mkdir -p output/charts
          chmod +x scripts/*.py
      
      - name: Run log comparison
        run: |
          python scripts/compare_logs.py \
            --logs-pattern "logs/*.json" \
            --output "output/log_comparison.json"
      
      - name: Run log aggregation
        run: |
          python scripts/aggregate_logs.py \
            --logs-pattern "logs/*.json" \
            --output "output/aggregated_logs.json"
      
      - name: Generate charts
        run: |
          python scripts/generate_charts.py \
            --input "output/aggregated_logs.json" \
            --output-dir "output/charts"
      
      - name: Upload charts as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: log-analysis-charts
          path: output/charts/
          retention-days: 30
      
      - name: Upload analysis data as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: log-analysis-data
          path: |
            output/log_comparison.json
            output/aggregated_logs.json
          retention-days: 30
      
      - name: Generate PR comment content
        if: github.event_name == 'pull_request'
        id: pr-comment
        run: |
          cat > pr_comment.md << 'EOF'
          ## 📊 Log Analysis Results
          
          The logs pipeline has completed analysis of the soul debate logs. Here are the generated visualizations:
          
          ### 📈 Entropy Over Time
          Charts show how system entropy evolves during debates across different models.
          
          ### 🔥 Spike Analysis  
          Analysis of spike frequency and intensity patterns in the debate logs.
          
          ### 🤖 Model Comparison
          Comparative performance metrics across different AI models.
          
          ### 📋 Analysis Summary
          
          EOF
          
          # Add summary from analysis if available
          if [ -f "output/aggregated_logs.json" ]; then
            echo "**Models analyzed:** $(python -c "import json; data=json.load(open('output/aggregated_logs.json')); print(', '.join(data.get('model_statistics', {}).keys()))")" >> pr_comment.md
            echo "**Total logs processed:** $(python -c "import json; data=json.load(open('output/aggregated_logs.json')); print(data.get('total_logs_processed', 0))")" >> pr_comment.md
            echo "**Time series points:** $(python -c "import json; data=json.load(open('output/aggregated_logs.json')); ts=data.get('time_series', {}); print(f'entropy={len(ts.get(\"entropy_over_time\", []))}, spikes={len(ts.get(\"spikes_over_time\", []))}')")" >> pr_comment.md
          fi
          
          echo "" >> pr_comment.md
          echo "📁 **Artifacts:** Download the complete analysis data and charts from the [workflow run artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})." >> pr_comment.md
          echo "" >> pr_comment.md
          echo "### 📥 Chart Downloads" >> pr_comment.md
          echo "" >> pr_comment.md
          if [ -d "output/charts" ]; then
            echo "Generated charts:" >> pr_comment.md
            for chart in output/charts/*.png; do
              if [ -f "$chart" ]; then
                echo "- $(basename "$chart")" >> pr_comment.md
              fi
            done
          fi
          echo "" >> pr_comment.md
          echo "*Generated on: $(date -u)*" >> pr_comment.md
          
          echo "pr_comment<<EOF" >> $GITHUB_OUTPUT
          cat pr_comment.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Find existing PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '📊 Log Analysis Results'
      
      - name: Create or update PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.pr-comment.outputs.pr_comment }}
          edit-mode: replace
      
      - name: Output analysis summary
        run: |
          echo "=== Log Analysis Pipeline Summary ==="
          echo "✅ Log comparison completed"
          echo "✅ Log aggregation completed" 
          echo "✅ Chart generation completed"
          echo "✅ Artifacts uploaded"
          
          if [ -f "output/aggregated_logs.json" ]; then
            echo ""
            echo "📊 Analysis Results:"
            python -c "
          import json
          data = json.load(open('output/aggregated_logs.json'))
          print(f'  - Total logs processed: {data.get(\"total_logs_processed\", 0)}')
          models = data.get('model_statistics', {})
          print(f'  - Models analyzed: {len(models)}')
          for model, stats in models.items():
              print(f'    - {model}: {stats.get(\"total_logs\", 0)} logs, avg entropy {stats.get(\"avg_entropy\", 0):.3f}')
          "
          fi
          
          echo ""
          echo "📁 Generated artifacts:"
          if [ -d "output/charts" ]; then
            ls -la output/charts/
          fi