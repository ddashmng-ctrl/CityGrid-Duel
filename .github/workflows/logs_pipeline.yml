name: Logs Analysis Pipeline

on:
  pull_request:
    paths:
      - 'logs/**/*.json'
      - 'scripts/summarize_logs.py'
      - 'docs/soul_debate/README.md'
  push:
    branches:
      - main
    paths:
      - 'logs/**/*.json'
      - 'scripts/summarize_logs.py'

permissions:
  contents: write
  pull-requests: write

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Ensure we can commit changes back
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run log analysis script
        id: analyze
        run: |
          echo "::group::Running log analysis"
          python scripts/summarize_logs.py
          echo "::endgroup::"
          
          # Check if README was updated
          if git diff --quiet docs/soul_debate/README.md; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "No changes detected in README.md"
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "README.md was updated with new log analysis"
          fi

      - name: Commit updated README
        if: steps.analyze.outputs.no_changes == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/soul_debate/README.md
          git commit -m "Update log analysis summary [automated]" || exit 0
          git push || exit 0

      - name: Read updated summary
        id: read_summary
        if: github.event_name == 'pull_request'
        run: |
          # Read the updated README content
          SUMMARY_CONTENT=$(cat docs/soul_debate/README.md)
          
          # Create a delimiter for multiline content
          delimiter="$(openssl rand -hex 8)"
          echo "summary_content<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$SUMMARY_CONTENT" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Post PR comment with updated summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const summaryContent = `${{ steps.read_summary.outputs.summary_content }}`;
              
              // Create formatted comment
              const commentBody = `## ðŸ“Š Updated Log Analysis Summary
            
            The logs have been analyzed and the summary has been updated:
            
            \`\`\`markdown
            ${summaryContent}
            \`\`\`
            
            This comment was automatically generated by the logs analysis pipeline.
            `;
            
              // Check for existing comments from this action
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('ðŸ“Š Updated Log Analysis Summary')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
                console.log('Updated existing PR comment with log analysis');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
                console.log('Created new PR comment with log analysis');
              }
              
            } catch (error) {
              console.error('Error posting PR comment:', error);
              core.setFailed(`Failed to post PR comment: ${error.message}`);
              
              // Log additional debug information
              console.log('Context:', JSON.stringify(context, null, 2));
              console.log('Available environment variables:');
              console.log('- GITHUB_TOKEN:', process.env.GITHUB_TOKEN ? 'present' : 'missing');
              console.log('- GITHUB_REPOSITORY:', process.env.GITHUB_REPOSITORY);
              console.log('- GITHUB_EVENT_NAME:', process.env.GITHUB_EVENT_NAME);
            }

      - name: Log workflow completion
        run: |
          echo "::notice::Logs analysis pipeline completed successfully"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "::notice::Updated summary posted as PR comment"
          else
            echo "::notice::README updated and committed to repository"
          fi