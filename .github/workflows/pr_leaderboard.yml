---
name: PR Leaderboard

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  leaderboard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema
          if [ -f requirements.txt. ]; then
            pip install -r requirements.txt.
          fi

      - name: Validate JSON logs
        run: |
          python -c "
          import json
          import jsonschema
          import glob
          import sys

          # Load schema
          with open('logs/soul_debate_schema.json', 'r') as f:
              schema = json.load(f)

          # Find and validate all JSON files in logs/
          log_files = glob.glob('logs/*.json')
          errors = []

          for log_file in log_files:
              if 'soul_debate_schema.json' in log_file:
                  continue

              try:
                  with open(log_file, 'r') as f:
                      data = json.load(f)

                  # Validate against schema
                  jsonschema.validate(data, schema)
                  print(f'✅ {log_file} is valid')

              except jsonschema.ValidationError as e:
                  error_msg = f'❌ {log_file}: {e.message}'
                  print(error_msg)
                  errors.append(error_msg)
              except Exception as e:
                  error_msg = f'❌ {log_file}: {str(e)}'
                  print(error_msg)
                  errors.append(error_msg)

          if errors:
              print(f'Found {len(errors)} validation errors:')
              for error in errors:
                  print(f'  {error}')
              sys.exit(1)
          else:
              count = len([f for f in log_files if 'soul_debate_schema.json' not in f])
              print(f'✅ All {count} log files are valid')
          "

      - name: Run aggregate logs script
        run: |
          python scripts/aggregate_logs.py

      - name: Run summarize logs script
        run: |
          python scripts/summarize_logs.py

      - name: Post leaderboard comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the generated leaderboard
            let leaderboard = '';
            try {
              leaderboard = fs.readFileSync('leaderboard.md', 'utf8');
            } catch (error) {
              leaderboard = '# 🏆 CityGrid Duel Leaderboard\n\nNo leaderboard data found.';
            }

            // Create comment body
            const body = `## 🤖 Automated Leaderboard Update

            ${leaderboard}

            ---
            *This comment was automatically generated by the PR Leaderboard workflow.*`;

            // Check if there's already a comment from this workflow
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Automated Leaderboard Update')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
              console.log('Updated existing leaderboard comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
              console.log('Created new leaderboard comment');
            }