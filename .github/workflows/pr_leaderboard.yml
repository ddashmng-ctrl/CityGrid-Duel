name: PR Leaderboard

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'logs/*.json'
      - 'output/*.json'

jobs:
  leaderboard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema pandas numpy
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: logs/*.json
          files_ignore: logs/soul_debate_schema.json
      
      - name: Validate new JSON logs
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Validating changed JSON files..."
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Validating $file against schema..."
            python3 -c "
          import json
          import jsonschema
          import sys
          
          # Load schema
          with open('logs/soul_debate_schema.json', 'r') as f:
              schema = json.load(f)
          
          # Load and validate the file
          try:
              with open('$file', 'r') as f:
                  data = json.load(f)
              jsonschema.validate(data, schema)
              print('‚úÖ $file is valid')
          except jsonschema.exceptions.ValidationError as e:
              print(f'‚ùå $file validation failed: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Error processing $file: {e}')
              sys.exit(1)
            "
          done
          echo "All JSON files validated successfully!"
      
      - name: Aggregate logs
        run: |
          echo "Running log aggregation..."
          python3 scripts/aggregate_logs.py
      
      - name: Generate leaderboard
        id: leaderboard
        run: |
          echo "Generating leaderboard summary..."
          LEADERBOARD=$(python3 scripts/summarize_logs.py)
          echo "leaderboard<<EOF" >> $GITHUB_OUTPUT
          echo "$LEADERBOARD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Post leaderboard comment
        uses: actions/github-script@v7
        with:
          script: |
            const leaderboard = `${{ steps.leaderboard.outputs.leaderboard }}`;
            
            // Find existing leaderboard comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment =>
              comment.body.includes('üèÜ CityGrid Duel Leaderboard')
            );
            
            const commentBody = `<!-- leaderboard-comment -->
            ${leaderboard}
            
            ---
            *This leaderboard is automatically updated when logs are modified.*`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('Updated existing leaderboard comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('Created new leaderboard comment');
            }